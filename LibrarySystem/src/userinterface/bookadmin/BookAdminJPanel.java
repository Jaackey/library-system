/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.bookadmin;

import business.account.AccountItem;
import business.book.Book;
import business.library.Library;
import business.record.RecordItem;
import business.runnable.BookLentRunnable;
import business.runnable.GenerateQRCodeeRunnable;
import business.system.LibSystem;
import business.useraccount.UserAccount;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jackey
 */
public class BookAdminJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Library library;
    private LibSystem system;
    /**
     * Creates new form BookAdminJPanel
     */
    public BookAdminJPanel() {
        initComponents();
    }

    public BookAdminJPanel(JPanel userProcessContainer, Library library, LibSystem system) {
        this.userProcessContainer = userProcessContainer;
        this.library = library;
        this.system = system;
        initComponents();
        populateTable();
        populateCombo();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();       
        model.setRowCount(0);
        for(Book book : library.getBookCatalog().getBookList()){
                Object[] row = new Object[7];
                row[0] = book;
                row[1] = book.getAuthor();
                row[2] = book.getPress();
                row[3] = book.getDate();
                row[4] = book.getLocation();
                row[5] = book.getAmount();
                row[6] = book.getPledge();
                model.addRow(row);
        }
    }
   
    public void populateCombo(){
        searchCombo.removeAllItems();
        searchCombo.addItem("Name");
        searchCombo.addItem("Author");
        searchCombo.addItem("Press");
    }

    public void searchName(String name){
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();       
        model.setRowCount(0);
        for(Book book : library.getBookCatalog().getBookList()){
            int a = book.getName().indexOf(name);
            if(a >= 0){
                Object[] row = new Object[7];
                row[0] = book;
                row[1] = book.getAuthor();
                row[2] = book.getPress();
                row[3] = book.getDate();
                row[4] = book.getLocation();
                row[5] = book.getAmount();
                row[6] = book.getPledge();
                model.addRow(row);
            }
        }
    }
    
    public void searchAuthor(String author){
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();       
        model.setRowCount(0);
        for(Book book : library.getBookCatalog().getBookList()){
            int a = book.getAuthor().indexOf(author);
            if(a >= 0){
                Object[] row = new Object[7];
                row[0] = book;
                row[1] = book.getAuthor();
                row[2] = book.getPress();
                row[3] = book.getDate();
                row[4] = book.getLocation();
                row[5] = book.getAmount();
                row[6] = book.getPledge();
                model.addRow(row);
            }
        }
    }
    
    public void searchPress(String press){
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();       
        model.setRowCount(0);
        for(Book book : library.getBookCatalog().getBookList()){
            int a = book.getPress().indexOf(press);
            if(a >= 0){
                Object[] row = new Object[7];
                row[0] = book;
                row[1] = book.getAuthor();
                row[2] = book.getPress();
                row[3] = book.getDate();
                row[4] = book.getLocation();
                row[5] = book.getAmount();
                row[6] = book.getPledge();
                model.addRow(row);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        searchCombo = new javax.swing.JComboBox();
        searchText = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        processBtn = new javax.swing.JButton();
        recordBtn = new javax.swing.JButton();
        requestBtn = new javax.swing.JButton();
        accountText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        editBtn = new javax.swing.JButton();
        vipBtn = new javax.swing.JButton();
        qrCodeBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("Book Admin Work Area");

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book Name", "Author", "Press", "PublishDate", "Book Location", "Amount Remain", "Pledge($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(bookTable);

        jLabel2.setText("Search By:");

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        processBtn.setText("Process");
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        recordBtn.setText("View Record");
        recordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordBtnActionPerformed(evt);
            }
        });

        requestBtn.setText("New Book Request");
        requestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Reader User Account:");

        editBtn.setText("Edit Book");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        vipBtn.setText("Become VIP");
        vipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vipBtnActionPerformed(evt);
            }
        });

        qrCodeBtn.setText("Generate QR Code");
        qrCodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrCodeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vipBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addComponent(jLabel1)
                                .addGap(215, 215, 215))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(accountText, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(processBtn))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(editBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(qrCodeBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(requestBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(recordBtn))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recordBtn)
                    .addComponent(requestBtn)
                    .addComponent(editBtn)
                    .addComponent(qrCodeBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn)
                    .addComponent(processBtn)
                    .addComponent(accountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vipBtn)
                .addContainerGap(40, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String searchBy = (String)searchCombo.getSelectedItem();
        String searchFor = searchText.getText();
        if(searchBy.equals("Name")){
            searchName(searchFor);
        }
        if(searchBy.equals("Author")){
            searchAuthor(searchFor);
        }
        if(searchBy.equals("Press")){
            searchPress(searchFor);
        }
        
    }//GEN-LAST:event_searchBtnActionPerformed

    private void requestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBtnActionPerformed
        // TODO add your handling code here:
        NewBookRequestJPanel nbrjp = new NewBookRequestJPanel(userProcessContainer, library);
        userProcessContainer.add("NewBookRequestJPanel", nbrjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_requestBtnActionPerformed

    private void recordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordBtnActionPerformed
        // TODO add your handling code here:
        ViewRecordJPanel vrjp = new ViewRecordJPanel(userProcessContainer, library);
        userProcessContainer.add("ViewRecordJPanel", vrjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_recordBtnActionPerformed

    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookTable.getSelectedRow();
        boolean flag = false;
        if(selectedRow >= 0){
            if(accountText.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Please Enter Reader User Account Name!");
                return;
            }
            else{
                for(UserAccount ua : system.getOrganizationCatalog().getOrganizationList().get(0).getUserAccountCatalog().getUserAccountList()){
                    if(ua.getUsername().equals(accountText.getText())){
                        Book book = (Book)bookTable.getValueAt(selectedRow, 0);
                        RecordItem ri = new RecordItem();
                        ri.setBook(book);
                        ri.setUserAccount(ua);
                        ri.setLibrary(library);
                        ri.setStatus("Lent");
                        book.setAmount(book.getAmount() - 1);
                        book.setPopularity(book.getPopularity() + 1);
                        library.getLentRecord().getRecordList().add(ri);
                        flag = true;
                        populateTable();
                        JOptionPane.showMessageDialog(null, "Success!");
                        BookLentRunnable blr = new BookLentRunnable(library, ri.getBook().getName(), book.getAmount());
                        Thread t1 = new Thread(blr);
                        t1.start();
                    }
                }
                if(flag == false){
                    JOptionPane.showMessageDialog(null, "User Account Not Found!");
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No Record Selected");
            return;
        }
    }//GEN-LAST:event_processBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookTable.getSelectedRow();
        if(selectedRow >= 0){
            Book book = (Book)bookTable.getValueAt(selectedRow, 0);
            EditBookJPanel ebjp = new EditBookJPanel(userProcessContainer, library, book);
            userProcessContainer.add("EditBookJPanel", ebjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else{
            JOptionPane.showMessageDialog(null, "No Book Selected");
            return;
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void vipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vipBtnActionPerformed
        // TODO add your handling code here:
        boolean flag = false;
        if(accountText.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Please Enter Reader User Account Name!");
            return;
        }
        for(UserAccount ua : system.getOrganizationCatalog().getOrganizationList().get(0).getUserAccountCatalog().getUserAccountList()){
            if(ua.getUsername().equals(accountText.getText())){
                flag = true;
                ua.getPerson().setIsVip(true);
                AccountItem ai = library.getLibraryAccount().createAccountItem(AccountItem.Type.Income);
                ai.setMoney(100.00);
                ai.setDate(new Date());
                ai.setExplain("VIP Fee");
                ai.setReceiver(ua.getPerson().getName());
                JOptionPane.showMessageDialog(null, "Success!");
            }
        }
        if(flag == false){
            JOptionPane.showMessageDialog(null, "User Account Not Found!");
        }
    }//GEN-LAST:event_vipBtnActionPerformed

    private void qrCodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrCodeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookTable.getSelectedRow();
        if(selectedRow >= 0){
            Book book = (Book)bookTable.getValueAt(selectedRow, 0);
            GenerateQRCodeeRunnable gcr = new GenerateQRCodeeRunnable(library, book);
            Thread t1 = new Thread(gcr);
            t1.start();
            try {
                t1.join();
            } catch (InterruptedException ex) {
                System.out.println("JOIN ERROR");
            }
            JOptionPane.showMessageDialog(null, "QR Code Generated Successfully!");
            System.out.println("QR Code Under: " + book.getQrCodePath());
        }
        else{
            JOptionPane.showMessageDialog(null, "No Book Selected");
            return;
        }
    }//GEN-LAST:event_qrCodeBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountText;
    private javax.swing.JTable bookTable;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processBtn;
    private javax.swing.JButton qrCodeBtn;
    private javax.swing.JButton recordBtn;
    private javax.swing.JButton requestBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JTextField searchText;
    private javax.swing.JButton vipBtn;
    // End of variables declaration//GEN-END:variables
}
